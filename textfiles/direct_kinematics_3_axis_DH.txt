n = input('Enter number of joints: ');
fprintf('Enter q (Theta in radians) as a vector: ');
q = input('');

fprintf('Enter d (link offset) as a vector: ');
d = input('');
fprintf('Enter a (link length) as a vector: ');
a = input('');
fprintf('Enter Alpha (link twist, in radians) as a vector: ');
alpha = input('');

T = eye(4);
for i = 1:n
theta = q(i);
d_i = d(i);
a_i = a(i);
alpha_i = alpha(i);
c_i = cos(theta);
s_i = sin(theta);
c_alpha = cos(alpha_i);
s_alpha = sin(alpha_i);
A = [c_i -s_i*c_alpha s_i*s_alpha a_i*c_i;
     s_i c_i*c_alpha -c_i*s_alpha a_i*s_i;
     0 s_alpha c_alpha d_i;
     0 0 0 1];
T = T * A;
end

clc;
clear;
close all;

n = input('Enter number of joints: ');
fprintf('Enter q (Theta in radians) as a vector: ');
q = input('');
fprintf('Enter d (link offset) as a vector: ');
d = input('');
fprintf('Enter a (link length) as a vector: ');
a = input('');
fprintf('Enter Alpha (link twist, in radians) as a vector: ');
alpha = input('');

T = eye(4);
for i = 1:n
theta = q(i);
d_i = d(i);
a_i = a(i);
alpha_i = alpha(i);
c_i = cos(theta);
s_i = sin(theta);
c_alpha = cos(alpha_i);
s_alpha = sin(alpha_i);
A = [c_i -s_i*c_alpha s_i*s_alpha a_i*c_i;
     s_i c_i*c_alpha -c_i*s_alpha a_i*s_i;
     0 s_alpha c_alpha d_i;
     0 0 0 1];
T = T * A;
end
fprintf('\nFinal Transformation Matrix:\n');
disp(T);
position_vector = T(1:3, 4);
fprintf('Position Vector:\n');
disp(position_vector);
